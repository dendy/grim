
project( libGrimAudio )

# Qt4
set( QT_MIN_VERSION "4.5.0" )
find_package( Qt4 REQUIRED )
set( QT_DONT_USE_QTGUI 1 )
include( ${QT_USE_FILE} )

# OpenAL
find_package( OpenAL REQUIRED )


# options
option( GRIM_AUDIO_DEBUG "Enable debugging for libGrimAudio" OFF )
option( GRIM_AUDIO_BUILD_PLUGIN_WAVE   "Build Wave format support" ON )
option( GRIM_AUDIO_BUILD_PLUGIN_VORBIS "Build Ogg/Vorbis format support" ON )
option( GRIM_AUDIO_BUILD_PLUGIN_FLAC   "Build Flac format support" ON )

if ( UNIX )
	option( GRIM_AUDIO_NULL_BUFFER_WORKAROUND "Enable workaround for openal-soft null buffer bug" ON )
	mark_as_advanced( GRIM_AUDIO_NULL_BUFFER_WORKAROUND )
endif ( UNIX )


# include directories
include_directories( "${CMAKE_CURRENT_BINARY_DIR}" )
include_directories( "${GRIM_ROOT_DIR}/include" )


# defines
add_definitions( -DGRIM_AUDIO_BUILD )
add_definitions( -DGRIM_TOOLS_STATIC )
add_definitions( -DGRIM_AUDIO_OPENAL_INCLUDE_DIR_PREFIX_${OPENAL_INCLUDE_DIR_PREFIX} )
if ( GRIM_AUDIO_DEBUG )
	add_definitions( -DGRIM_AUDIO_DEBUG )
endif ( GRIM_AUDIO_DEBUG )


# workaround for alSourcei( source_id, AL_BUFFER, 0 )
# openal-soft implementation fails to release processed buffers as OpenAL specification requires
if ( GRIM_AUDIO_NULL_BUFFER_WORKAROUND )
	add_definitions( -DGRIM_AUDIO_NULL_BUFFER_WORKAROUND )
endif ( GRIM_AUDIO_NULL_BUFFER_WORKAROUND )


# sources
set( SRC "${GRIM_ROOT_DIR}/src/audio" )

set( grim_audio_HEADERS
	${SRC}/audiobuffer.h
	${SRC}/audiobufferdata.h
	${SRC}/audiobufferloader.h
	${SRC}/audiocapturedevice.h
	${SRC}/audiocontext.h
	${SRC}/audiodevice.h
	${SRC}/audioformatplugin.h
	${SRC}/audiolistener.h
	${SRC}/audiomanager.h
	${SRC}/audiomath.h
	${SRC}/audiosource.h
	${SRC}/audio_p.h
)

set( grim_audio_SOURCES
	${SRC}/audiobuffer.cpp
	${SRC}/audiobufferdata.cpp
	${SRC}/audiobufferloader.cpp
	${SRC}/audiocapturedevice.cpp
	${SRC}/audiocontext.cpp
	${SRC}/audiodevice.cpp
	${SRC}/audioformatplugin.cpp
	${SRC}/audiolistener.cpp
	${SRC}/audiomanager.cpp
	${SRC}/audiomath.cpp
	${SRC}/audiosource.cpp
)

# fill all grim sources
grim_add_sources( ${grim_audio_SOURCES} )

# tools sources
set( TOOLS_SRC "${GRIM_ROOT_DIR}/src/tools" )

set( grim_audio_tools_HEADERS
	${TOOLS_SRC}/idgenerator.h
)

set( grim_audio_tools_SOURCES
	${TOOLS_SRC}/idgenerator.cpp
)


# Qt4 wrappers
set( grim_audio_MOC_SOURCES )
qt4_wrap_cpp( grim_audio_MOC_SOURCES ${grim_audio_HEADERS} ${grim_audio_tools_HEADERS} OPTIONS "-nw" )


# all source files
set( grim_audio_ALL_SOURCES ${grim_audio_SOURCES} ${grim_audio_tools_SOURCES} ${grim_audio_MOC_SOURCES} )


# target
add_library( libGrimAudio SHARED ${grim_audio_ALL_SOURCES} )
target_link_libraries( libGrimAudio ${QT_LIBRARIES} ${OPENAL_LIBRARY} )
set_target_properties( libGrimAudio PROPERTIES VERSION "${GRIM_VERSION}" SOVERSION "${GRIM_SOVERSION}" OUTPUT_NAME GrimAudio )

grim_get_target_libraries( _interface_library _runtime_library libGrimAudio )
set( GRIM_AUDIO_LIBRARY "${_interface_library}" PARENT_SCOPE )

grim_add_precompiled_headers_wrapper( libGrimAudio "${SRC}/precompiledheaders.h" ${grim_audio_ALL_SOURCES} )


# plugins
set( GRIM_AUDIO_PLUGINS_HEADER "generated/plugins.h" )
set( GRIM_AUDIO_PLUGINS_HEADER_PATH "${CMAKE_CURRENT_BINARY_DIR}/${GRIM_AUDIO_PLUGINS_HEADER}" )


# generate header file that will be included from audiomanager.cpp
# this file contains set of rules to link libGrimAudio with static plugins
file( WRITE "${GRIM_AUDIO_PLUGINS_HEADER_PATH}"
	"\n"
	"// This file is automatically generated by CMake for the libGrimAudio\n"
	"// to be included from audiomanager.cpp for importing static plugins.\n"
	"// Do not edit me, all changes will be lost after build.\n"
	"\n"
)


macro( grim_audio_add_format_plugin TARGET NAME )
	add_dependencies( libGrimAudio ${TARGET} )
	set( GRIM_PLUGIN_TARGETS "${GRIM_PLUGIN_TARGETS}" "${TARGET}" PARENT_SCOPE )
	file( APPEND "${GRIM_AUDIO_PLUGINS_HEADER_PATH}"
		"Q_IMPORT_PLUGIN( ${NAME} )\n" )
endmacro( grim_audio_add_format_plugin )


# build wave plugin
if ( GRIM_AUDIO_BUILD_PLUGIN_WAVE )
	add_subdirectory( "formats/wave" )
endif ( GRIM_AUDIO_BUILD_PLUGIN_WAVE )

# build ogg/vorbis plugin
if ( GRIM_AUDIO_BUILD_PLUGIN_VORBIS )
	add_subdirectory( "formats/vorbis" )
endif ( GRIM_AUDIO_BUILD_PLUGIN_VORBIS )

# build flac plugin
if ( GRIM_AUDIO_BUILD_PLUGIN_FLAC )
	add_subdirectory( "formats/flac" )
endif ( GRIM_AUDIO_BUILD_PLUGIN_FLAC )


foreach( _plugin_target ${GRIM_PLUGIN_TARGETS} )
	get_target_property( _target_location ${_plugin_target} LOCATION )
	target_link_libraries( libGrimAudio ${_target_location} )

	get_target_property( _link_interface_libraries ${_plugin_target} LINK_INTERFACE_LIBRARIES )
	if ( _link_interface_libraries )
		foreach( _plugin_link_library ${_link_interface_libraries} )
			target_link_libraries( libGrimAudio ${_plugin_link_library} )
		endforeach( _plugin_link_library )
	endif ( _link_interface_libraries )
endforeach( _plugin_target )


# installation
install( TARGETS libGrimAudio
	ARCHIVE DESTINATION "${GRIM_ARCHIVE_DESTINATION}"
	LIBRARY DESTINATION "${GRIM_LIBRARY_DESTINATION}"
	RUNTIME DESTINATION "${GRIM_RUNTIME_DESTINATION}"
	)
